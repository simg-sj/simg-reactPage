{"ast":null,"code":"import axios from 'axios';\n/** Axios Response 데이터 형식\r\n *  config : 요청에 대한 axios 구성 설정\r\n *  data 서버가 제공한 응답 데이터\r\n *  headers : 헤더 정보\r\n *  request : 요청\r\n *  status : 응답 HTTP 상태 코드\r\n *  statusText : 응답 HTTP 상태 메시지\r\n */\n\n// 본인 서버에서 내려주는 응답 구조\nconst baseUrl = process.env.REACT_APP_BASE_JOIN;\nexport async function sendJoin(param) {\n  let apiKey = '';\n  if (param.bpk === 'onna') apiKey = process.env.REACT_APP_X_API_SECRET_ONNA;\n  if (param.bpk === 'enuri') apiKey = process.env.REACT_APP_X_API_SECRET_ENURI;\n  if (param.bpk === 'barico') apiKey = process.env.REACT_APP_X_API_SECRET_BARICO;\n  try {\n    const res = await axios.post(baseUrl, param, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'X-API-SECRET': apiKey\n      }\n    });\n    console.log(res.status);\n    if (res.status === 200) {\n      return {\n        status: res.status\n      };\n    }\n  } catch (error) {\n    return {\n      status: error,\n      msg: '서버오류 : [ 1877-3006 ] 고객센터에 문의바랍니다.'\n    };\n  }\n}","map":{"version":3,"names":["axios","baseUrl","process","env","REACT_APP_BASE_JOIN","sendJoin","param","apiKey","bpk","REACT_APP_X_API_SECRET_ONNA","REACT_APP_X_API_SECRET_ENURI","REACT_APP_X_API_SECRET_BARICO","res","post","headers","console","log","status","error","msg"],"sources":["C:/Users/김기덕/IdeaProjects/connect_onna/src/pages/api/sendJoin.tsx"],"sourcesContent":["import axios, {AxiosResponseHeaders, InternalAxiosRequestConfig, RawAxiosResponseHeaders,} from 'axios'\r\n/** Axios Response 데이터 형식\r\n *  config : 요청에 대한 axios 구성 설정\r\n *  data 서버가 제공한 응답 데이터\r\n *  headers : 헤더 정보\r\n *  request : 요청\r\n *  status : 응답 HTTP 상태 코드\r\n *  statusText : 응답 HTTP 상태 메시지\r\n */\r\n\r\n    // 본인 서버에서 내려주는 응답 구조\r\ninterface AxiosResponse<T = any, D = any> {\r\n    data: T\r\n    status: number\r\n    statusText: string\r\n    headers: RawAxiosResponseHeaders | AxiosResponseHeaders\r\n    config: InternalAxiosRequestConfig<D>\r\n    request?: any\r\n}\r\n\r\n\r\ntype ParamProps = {\r\n    bpk : string,\r\n    cName : string,\r\n    cCell : string,\r\n    cJumin : string,\r\n    cMail : string,\r\n    cPost : string,\r\n    cAddr1 : string,\r\n    cAddr2 : string,\r\n    cJob : string,\r\n    carNm : string,\r\n    carUse : string\r\n}\r\nconst baseUrl : any = process.env.REACT_APP_BASE_JOIN;\r\nexport async function sendJoin(param : ParamProps)  {\r\n    let apiKey : any = '';\r\n    if(param.bpk === 'onna') apiKey = process.env.REACT_APP_X_API_SECRET_ONNA;\r\n    if(param.bpk === 'enuri') apiKey = process.env.REACT_APP_X_API_SECRET_ENURI;\r\n    if(param.bpk === 'barico') apiKey = process.env.REACT_APP_X_API_SECRET_BARICO;\r\n    try {\r\n        const res = await axios.post<AxiosResponse<any>>(baseUrl, param,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                    'X-API-SECRET' : apiKey\r\n                }\r\n            });\r\n        console.log(res.status)\r\n        if (res.status === 200) {\r\n            return {status : res.status};\r\n        }\r\n    } catch (error) {\r\n        return {status : error , msg : '서버오류 : [ 1877-3006 ] 고객센터에 문의바랍니다.'};\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAoF,OAAO;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AAwBJ,MAAMC,OAAa,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB;AACrD,OAAO,eAAeC,QAAQA,CAACC,KAAkB,EAAG;EAChD,IAAIC,MAAY,GAAG,EAAE;EACrB,IAAGD,KAAK,CAACE,GAAG,KAAK,MAAM,EAAED,MAAM,GAAGL,OAAO,CAACC,GAAG,CAACM,2BAA2B;EACzE,IAAGH,KAAK,CAACE,GAAG,KAAK,OAAO,EAAED,MAAM,GAAGL,OAAO,CAACC,GAAG,CAACO,4BAA4B;EAC3E,IAAGJ,KAAK,CAACE,GAAG,KAAK,QAAQ,EAAED,MAAM,GAAGL,OAAO,CAACC,GAAG,CAACQ,6BAA6B;EAC7E,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAqBZ,OAAO,EAAEK,KAAK,EAC3D;MACIQ,OAAO,EAAE;QACL,cAAc,EAAE,mCAAmC;QACnD,cAAc,EAAGP;MACrB;IACJ,CAAC,CAAC;IACNQ,OAAO,CAACC,GAAG,CAACJ,GAAG,CAACK,MAAM,CAAC;IACvB,IAAIL,GAAG,CAACK,MAAM,KAAK,GAAG,EAAE;MACpB,OAAO;QAACA,MAAM,EAAGL,GAAG,CAACK;MAAM,CAAC;IAChC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO;MAACD,MAAM,EAAGC,KAAK;MAAGC,GAAG,EAAG;IAAoC,CAAC;EACxE;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}