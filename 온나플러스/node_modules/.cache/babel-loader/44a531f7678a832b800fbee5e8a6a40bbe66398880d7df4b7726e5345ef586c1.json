{"ast":null,"code":"import React,{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const PhoneInput=_ref=>{let{setCell,setIsCell}=_ref;const[phone,setPhone]=useState('');const[isCheck,setIsCheck]=useState(false);const onChangeHandler=e=>{const phoneRegex=/^\\d{3}\\d{3,4}\\d{4}$/;const{value}=e.target;const onlyNumber=value.replace(/[^-0-9]/g,'');setPhone(onlyNumber);if(phoneRegex.test(onlyNumber)){setIsCheck(true);setIsCell(true);setCell(onlyNumber);}else{setIsCheck(false);setIsCell(false);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{placeholder:\"\\uD734\\uB300\\uD3F0 \\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",className:\"input\",value:phone,type:\"string\",onChange:e=>onChangeHandler(e)}),/*#__PURE__*/_jsx(\"h2\",{className:\"text-gray-500/50 font-semibold text-[12px] pt-1\",children:\"(-)\\uC5C6\\uC774 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"}),!isCheck&&phone!==''&&/*#__PURE__*/_jsx(\"h2\",{className:\"text-red-500 text-[12px]\",children:\"\\uD734\\uB300\\uD3F0 \\uBC88\\uD638 \\uD615\\uC2DD\\uC774 \\uB9DE\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"})]});};export default PhoneInput;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","PhoneInput","_ref","setCell","setIsCell","phone","setPhone","isCheck","setIsCheck","onChangeHandler","e","phoneRegex","value","target","onlyNumber","replace","test","children","placeholder","className","type","onChange"],"sources":["C:/Users/김기덕/IdeaProjects/connect_onna/src/components/atoms/phoneInput.tsx"],"sourcesContent":["import React, {Dispatch, SetStateAction, useState} from \"react\";\r\n\r\ninterface Props {\r\n    setCell: React.Dispatch<React.SetStateAction<string>>;\r\n    setIsCell : React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\nconst PhoneInput = ({setCell, setIsCell} : Props) => {\r\n    const [phone, setPhone] = useState<string>('');\r\n    const [isCheck, setIsCheck] = useState<boolean>(false);\r\n    const onChangeHandler = (e : React.ChangeEvent<HTMLInputElement>) => {\r\n        const phoneRegex =/^\\d{3}\\d{3,4}\\d{4}$/;\r\n        const { value } = e.target;\r\n        const onlyNumber = value.replace(/[^-0-9]/g, '');\r\n        setPhone(onlyNumber);\r\n        if(phoneRegex.test(onlyNumber)){\r\n            setIsCheck(true);\r\n            setIsCell(true);\r\n            setCell(onlyNumber);\r\n        }else {\r\n            setIsCheck(false);\r\n            setIsCell(false);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <input placeholder='휴대폰 번호를 입력해주세요' className='input'  value={phone} type='string' onChange={(e) => onChangeHandler(e)}/>\r\n            <h2 className='text-gray-500/50 font-semibold text-[12px] pt-1'>(-)없이 입력해주세요.</h2>\r\n            {!isCheck && phone !== '' && <h2 className='text-red-500 text-[12px]'>휴대폰 번호 형식이 맞지 않습니다.</h2>}\r\n        </div>\r\n    )\r\n}\r\nexport default PhoneInput;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAA6BC,QAAQ,KAAO,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAMhE,KAAM,CAAAC,UAAU,CAAGC,IAAA,EAAkC,IAAjC,CAACC,OAAO,CAAEC,SAAiB,CAAC,CAAAF,IAAA,CAC5C,KAAM,CAACG,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAS,EAAE,CAAC,CAC9C,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAU,KAAK,CAAC,CACtD,KAAM,CAAAa,eAAe,CAAIC,CAAuC,EAAK,CACjE,KAAM,CAAAC,UAAU,CAAE,qBAAqB,CACvC,KAAM,CAAEC,KAAM,CAAC,CAAGF,CAAC,CAACG,MAAM,CAC1B,KAAM,CAAAC,UAAU,CAAGF,KAAK,CAACG,OAAO,CAAC,UAAU,CAAE,EAAE,CAAC,CAChDT,QAAQ,CAACQ,UAAU,CAAC,CACpB,GAAGH,UAAU,CAACK,IAAI,CAACF,UAAU,CAAC,CAAC,CAC3BN,UAAU,CAAC,IAAI,CAAC,CAChBJ,SAAS,CAAC,IAAI,CAAC,CACfD,OAAO,CAACW,UAAU,CAAC,CACvB,CAAC,IAAK,CACFN,UAAU,CAAC,KAAK,CAAC,CACjBJ,SAAS,CAAC,KAAK,CAAC,CACpB,CACJ,CAAC,CACD,mBACIJ,KAAA,QAAAiB,QAAA,eACInB,IAAA,UAAOoB,WAAW,CAAC,4EAAgB,CAACC,SAAS,CAAC,OAAO,CAAEP,KAAK,CAAEP,KAAM,CAACe,IAAI,CAAC,QAAQ,CAACC,QAAQ,CAAGX,CAAC,EAAKD,eAAe,CAACC,CAAC,CAAE,CAAC,CAAC,cACzHZ,IAAA,OAAIqB,SAAS,CAAC,iDAAiD,CAAAF,QAAA,CAAC,uDAAa,CAAI,CAAC,CACjF,CAACV,OAAO,EAAIF,KAAK,GAAK,EAAE,eAAIP,IAAA,OAAIqB,SAAS,CAAC,0BAA0B,CAAAF,QAAA,CAAC,2FAAmB,CAAI,CAAC,EAC7F,CAAC,CAEd,CAAC,CACD,cAAe,CAAAhB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}