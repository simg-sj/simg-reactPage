{"ast":null,"code":"import * as XLSX from \"xlsx-js-style\";\nimport dayjs from 'dayjs';\nexport function getCompany() {\n  const company = [{\n    code: '01',\n    name: '마이체크업'\n  }, {\n    code: '02',\n    name: '벨류맵'\n  }];\n  return company;\n}\nexport function getCode(type) {\n  const company = [{\n    type: '01',\n    code: '1',\n    name: '마이체크업'\n  }, {\n    type: '02',\n    code: '02',\n    name: '벨류맵'\n  }];\n  for (let idx of company) {\n    if (idx.type === type) return idx.code;\n  }\n  return '00';\n}\nexport function excelDownload(type, data) {\n  let today = dayjs().format('YYYY-MM-DD');\n  let excel = excelData(type, data); // 타입 지정\n  if (!excel) {\n    console.error('유효한 타입이 아닙니다.');\n    return;\n  }\n  const excelHandler = {\n    getExcelFileName: () => {\n      return \"유저 데이터.xlsx\";\n    },\n    getSheetName: () => {\n      return today + '_' + type;\n    },\n    getExcelData: () => {\n      return excel;\n    },\n    getWorksheet: () => {\n      const ws = XLSX.utils.json_to_sheet(excelHandler.getExcelData() || []); // undefined를 빈 배열로 처리\n\n      // @ts-ignore\n      const range = XLSX.utils.decode_range(ws['!ref']);\n\n      // 각 행에 스타일을 적용합니다.\n      for (let rowNum = range.s.r; rowNum <= range.e.r; rowNum++) {\n        const row = XLSX.utils.encode_row(rowNum);\n        for (let colNum = range.s.c; colNum <= range.e.c; colNum++) {\n          const cell = XLSX.utils.encode_col(colNum);\n          const cellRef = `${cell}${row}`;\n          // 특정 셀에 스타일을 설정합니다.\n          if (rowNum === 0) {\n            ws[cellRef].s = {\n              alignment: {\n                horizontal: 'center'\n              },\n              font: {\n                bold: true,\n                color: {\n                  rgb: 'FFFFFF'\n                }\n              },\n              fill: {\n                bgColor: {\n                  indexed: 64\n                },\n                fgColor: {\n                  rgb: '006ED0'\n                }\n              }\n            };\n          } else {\n            // 특정 열에는 배경색을 지정하지 않습니다.\n            ws[cellRef].s = {\n              alignment: {\n                horizontal: 'center'\n              }\n              // 필요한 다른 스타일 속성도 추가할 수 있습니다.\n            };\n          }\n        }\n      }\n      ws['!cols'] = [{\n        wpx: 120\n      }, {\n        wpx: 80\n      }, {\n        wpx: 120\n      }, {\n        wpx: 120\n      }, {\n        wpx: 80\n      }];\n      return ws;\n    }\n  };\n  const datas = excelHandler.getWorksheet();\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, datas, excelHandler.getSheetName());\n  XLSX.writeFile(workbook, excelHandler.getExcelFileName());\n}\nfunction excelData(type, data) {\n  console.log(type);\n  if (type === '벨류맵') {\n    return data.map(item => ({\n      고객키: item.cmpk,\n      이름: item.cName,\n      생년월일: item.cJumin,\n      연락처: item.cCell,\n      나이: item.age\n    }));\n  }\n  return undefined;\n}","map":{"version":3,"names":["XLSX","dayjs","getCompany","company","code","name","getCode","type","idx","excelDownload","data","today","format","excel","excelData","console","error","excelHandler","getExcelFileName","getSheetName","getExcelData","getWorksheet","ws","utils","json_to_sheet","range","decode_range","rowNum","s","r","e","row","encode_row","colNum","c","cell","encode_col","cellRef","alignment","horizontal","font","bold","color","rgb","fill","bgColor","indexed","fgColor","wpx","datas","workbook","book_new","book_append_sheet","writeFile","log","map","item","고객키","cmpk","이름","cName","생년월일","cJumin","연락처","cCell","나이","age","undefined"],"sources":["D:/IdeaProjects/admin/src/utils/common.ts"],"sourcesContent":["import {Person} from '../@types/common';\r\nimport * as XLSX from \"xlsx-js-style\";\r\nimport dayjs from 'dayjs';\r\nimport getDate from \"../utils/getDate\";\r\n\r\nexport function getCompany(){\r\n    const company = [\r\n        {\r\n            code : '01',\r\n            name : '마이체크업'\r\n        },\r\n        {\r\n            code : '02',\r\n            name : '벨류맵'\r\n        }\r\n    ];\r\n\r\n    return company;\r\n}\r\nexport function getCode(type : string){\r\n    const company = [\r\n        {\r\n            type : '01',\r\n            code : '1',\r\n            name : '마이체크업'\r\n        },\r\n        {\r\n            type : '02',\r\n            code : '02',\r\n            name : '벨류맵'\r\n        }\r\n    ];\r\n\r\n    for(let idx of company){\r\n        if(idx.type === type) return idx.code;\r\n    }\r\n    return '00';\r\n}\r\n\r\nexport function excelDownload(type: string, data: Person[]): void {\r\n    let today = dayjs().format('YYYY-MM-DD');\r\n    let excel: Excel[] | undefined = excelData(type, data); // 타입 지정\r\n    if (!excel) {\r\n        console.error('유효한 타입이 아닙니다.');\r\n        return;\r\n    }\r\n\r\n    const excelHandler = {\r\n        getExcelFileName: () => {\r\n            return \"유저 데이터.xlsx\";\r\n        },\r\n        getSheetName: () => {\r\n            return today + '_' + type;\r\n        },\r\n        getExcelData: () => {\r\n            return excel;\r\n        },\r\n        getWorksheet: () => {\r\n            const ws = XLSX.utils.json_to_sheet(excelHandler.getExcelData() || []); // undefined를 빈 배열로 처리\r\n\r\n            // @ts-ignore\r\n            const range = XLSX.utils.decode_range(ws['!ref']);\r\n\r\n            // 각 행에 스타일을 적용합니다.\r\n            for (let rowNum = range.s.r; rowNum <= range.e.r; rowNum++) {\r\n                const row = XLSX.utils.encode_row(rowNum);\r\n                for (let colNum = range.s.c; colNum <= range.e.c; colNum++) {\r\n                    const cell = XLSX.utils.encode_col(colNum);\r\n                    const cellRef = `${cell}${row}`;\r\n                    // 특정 셀에 스타일을 설정합니다.\r\n                    if (rowNum === 0) {\r\n                        ws[cellRef].s = {\r\n                            alignment: { horizontal: 'center' },\r\n                            font: { bold: true, color: { rgb: 'FFFFFF' } },\r\n                            fill: { bgColor: { indexed: 64 }, fgColor: { rgb: '006ED0' } },\r\n                        };\r\n                    } else {\r\n                        // 특정 열에는 배경색을 지정하지 않습니다.\r\n                        ws[cellRef].s = {\r\n                            alignment: { horizontal: 'center' },\r\n                            // 필요한 다른 스타일 속성도 추가할 수 있습니다.\r\n                        };\r\n                        }\r\n                }\r\n            }\r\n            ws['!cols'] = [\r\n                {\r\n                    wpx: 120,\r\n                },\r\n                {\r\n                    wpx: 80,\r\n                },\r\n                {\r\n                    wpx: 120,\r\n                },\r\n                {\r\n                    wpx: 120,\r\n                },\r\n                {\r\n                    wpx: 80,\r\n                },\r\n            ];\r\n            return ws;\r\n        },\r\n    };\r\n\r\n    const datas = excelHandler.getWorksheet();\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, datas, excelHandler.getSheetName());\r\n    XLSX.writeFile(workbook, excelHandler.getExcelFileName());\r\n}\r\n\r\n\r\ninterface Excel {\r\n    고객키 : string,\r\n    이름: string,\r\n    생년월일: string,\r\n    연락처: string,\r\n    나이: string\r\n}\r\n\r\nfunction excelData(type: string, data: any[]): Excel[] | undefined {\r\n    console.log(type);\r\n    if (type === '벨류맵') {\r\n        return data.map((item) => ({\r\n            고객키: item.cmpk,\r\n            이름: item.cName,\r\n            생년월일: item.cJumin,\r\n            연락처: item.cCell,\r\n            나이: item.age\r\n        }));\r\n    }\r\n    return undefined;\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}