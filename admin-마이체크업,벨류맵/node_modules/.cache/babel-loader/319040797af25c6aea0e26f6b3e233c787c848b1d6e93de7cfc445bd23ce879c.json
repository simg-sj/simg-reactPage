{"ast":null,"code":"import * as XLSX from \"xlsx-js-style\";\nimport dayjs from 'dayjs';\nexport function getCompany() {\n  const company = [{\n    code: '01',\n    name: '마이체크업'\n  }, {\n    code: '02',\n    name: '벨류맵'\n  }];\n  return company;\n}\nexport function getCode(type) {\n  const company = [{\n    type: '01',\n    code: '1',\n    name: '마이체크업'\n  }, {\n    type: '02',\n    code: '02',\n    name: '벨류맵'\n  }];\n  for (let idx of company) {\n    if (idx.type === type) return idx.code;\n  }\n  return '00';\n}\nexport function excelDownload(type, data) {\n  let today = dayjs().format('YYYY-MM-DD');\n  let excel = excelData(type, data); // 타입 지정\n  if (!excel) {\n    console.error('유효한 타입이 아닙니다.');\n    return;\n  }\n  const excelHandler = {\n    getExcelFileName: () => {\n      return \"유저 데이터.xlsx\";\n    },\n    getSheetName: () => {\n      return today + '_' + type;\n    },\n    getExcelData: () => {\n      return excel;\n    },\n    getWorksheet: () => {\n      const ws = XLSX.utils.json_to_sheet(excelHandler.getExcelData());\n\n      // 특정 셀에 스타일 적용 예제\n      ws['A1'].s = {\n        font: {\n          bold: true,\n          color: {\n            rgb: 'FF0000'\n          }\n        },\n        // 폰트 색상을 빨간색으로 지정\n        fill: {\n          bgColor: {\n            indexed: 64\n          },\n          fgColor: {\n            rgb: 'FFFF00'\n          }\n        },\n        // 배경색을 노란색으로 지정\n        border: {\n          top: {\n            style: 'thin',\n            color: {\n              rgb: '000000'\n            }\n          },\n          bottom: {\n            style: 'thin',\n            color: {\n              rgb: '000000'\n            }\n          }\n        } // 테두리 스타일 지정\n      };\n      ws['!cols'] = [{\n        wpx: 60\n      }];\n      return ws;\n    }\n  };\n  const datas = excelHandler.getWorksheet();\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, datas, excelHandler.getSheetName());\n  XLSX.writeFile(workbook, excelHandler.getExcelFileName());\n}\nfunction excelData(type, data) {\n  if (type === '벨류맵') {\n    return data.map(item => ({\n      고객키: item.cmpk,\n      이름: item.cName,\n      생년월일: item.cJumin,\n      연락처: item.cCell,\n      나이: item.age\n    }));\n  }\n  return '';\n}","map":{"version":3,"names":["XLSX","dayjs","getCompany","company","code","name","getCode","type","idx","excelDownload","data","today","format","excel","excelData","console","error","excelHandler","getExcelFileName","getSheetName","getExcelData","getWorksheet","ws","utils","json_to_sheet","s","font","bold","color","rgb","fill","bgColor","indexed","fgColor","border","top","style","bottom","wpx","datas","workbook","book_new","book_append_sheet","writeFile","map","item","고객키","cmpk","이름","cName","생년월일","cJumin","연락처","cCell","나이","age"],"sources":["D:/IdeaProjects/admin/src/utils/common.ts"],"sourcesContent":["import {Person} from '../@types/common';\r\nimport * as XLSX from \"xlsx-js-style\";\r\nimport dayjs from 'dayjs';\r\nimport getDate from \"../utils/getDate\";\r\n\r\nexport function getCompany(){\r\n    const company = [\r\n        {\r\n            code : '01',\r\n            name : '마이체크업'\r\n        },\r\n        {\r\n            code : '02',\r\n            name : '벨류맵'\r\n        }\r\n    ];\r\n\r\n    return company;\r\n}\r\nexport function getCode(type : string){\r\n    const company = [\r\n        {\r\n            type : '01',\r\n            code : '1',\r\n            name : '마이체크업'\r\n        },\r\n        {\r\n            type : '02',\r\n            code : '02',\r\n            name : '벨류맵'\r\n        }\r\n    ];\r\n\r\n    for(let idx of company){\r\n        if(idx.type === type) return idx.code;\r\n    }\r\n    return '00';\r\n}\r\n\r\nexport function excelDownload(type: string, data: Person[]): void {\r\n    let today = dayjs().format('YYYY-MM-DD');\r\n    let excel: Excel[]  = excelData(type, data); // 타입 지정\r\n    if (!excel) {\r\n        console.error('유효한 타입이 아닙니다.');\r\n        return;\r\n    }\r\n\r\n    const excelHandler = {\r\n        getExcelFileName: () => {\r\n            return \"유저 데이터.xlsx\";\r\n        },\r\n        getSheetName: () => {\r\n            return today + '_' + type;\r\n        },\r\n        getExcelData: () => {\r\n            return excel;\r\n        },\r\n        getWorksheet: () => {\r\n            const ws = XLSX.utils.json_to_sheet(excelHandler.getExcelData());\r\n\r\n            // 특정 셀에 스타일 적용 예제\r\n            ws['A1'].s = {\r\n                font: { bold: true, color: { rgb: 'FF0000' } }, // 폰트 색상을 빨간색으로 지정\r\n                fill: { bgColor: { indexed: 64 }, fgColor: { rgb: 'FFFF00' } }, // 배경색을 노란색으로 지정\r\n                border: { top: { style: 'thin', color: { rgb: '000000' } }, bottom: { style: 'thin', color: { rgb: '000000' } } } // 테두리 스타일 지정\r\n            };\r\n            ws['!cols'] = [\r\n                {\r\n                    wpx: 60,\r\n                }\r\n            ];\r\n\r\n            return ws;\r\n        },\r\n    };\r\n\r\n    const datas = excelHandler.getWorksheet();\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, datas, excelHandler.getSheetName());\r\n    XLSX.writeFile(workbook, excelHandler.getExcelFileName());\r\n}\r\n\r\ninterface Excel {\r\n    고객키 : string,\r\n    이름: string,\r\n    생년월일: string,\r\n    연락처: string,\r\n    나이: string\r\n}\r\n\r\nfunction excelData(type: string, data: any[]): Excel[] | undefined {\r\n    if (type === '벨류맵') {\r\n        return data.map((item) => ({\r\n            고객키: item.cmpk,\r\n            이름: item.cName,\r\n            생년월일: item.cJumin,\r\n            연락처: item.cCell,\r\n            나이: item.age\r\n        }));\r\n    }\r\n    return '';\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}