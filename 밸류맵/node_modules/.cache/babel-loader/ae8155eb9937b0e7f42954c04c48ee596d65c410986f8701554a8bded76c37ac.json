{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useControlled from '@mui/utils/useControlled';\nimport { useTheme } from '@mui/material/styles';\nimport { useUtils, useLocaleText, useLocalizationContext } from '../useUtils';\nimport { addPositionPropertiesToSections, splitFormatIntoSections, mergeDateIntoReferenceDate, getSectionsBoundaries, validateSections, getDateFromDateSections } from './useField.utils';\nimport { useValueWithTimezone } from '../useValueWithTimezone';\nimport { getSectionTypeGranularity } from '../../utils/getDefaultReferenceDate';\nexport const useFieldState = params => {\n  const utils = useUtils();\n  const localeText = useLocaleText();\n  const adapter = useLocalizationContext();\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const {\n    valueManager,\n    fieldValueManager,\n    valueType,\n    validator,\n    internalProps,\n    internalProps: {\n      value: valueProp,\n      defaultValue,\n      referenceDate: referenceDateProp,\n      onChange,\n      format,\n      formatDensity = 'dense',\n      selectedSections: selectedSectionsProp,\n      onSelectedSectionsChange,\n      shouldRespectLeadingZeros = false,\n      timezone: timezoneProp\n    }\n  } = params;\n  const {\n    timezone,\n    value: valueFromTheOutside,\n    handleValueChange\n  } = useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager\n  });\n  const sectionsValueBoundaries = React.useMemo(() => getSectionsBoundaries(utils, timezone), [utils, timezone]);\n  const getSectionsFromValue = React.useCallback(function (value) {\n    let fallbackSections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, date => splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL));\n  }, [fieldValueManager, format, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);\n  const placeholder = React.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);\n  const [state, setState] = React.useState(() => {\n    const sections = getSectionsFromValue(valueFromTheOutside);\n    validateSections(sections, valueType);\n    const stateWithoutReferenceDate = {\n      sections,\n      value: valueFromTheOutside,\n      referenceValue: valueManager.emptyValue,\n      tempValueStrAndroid: null\n    };\n    const granularity = getSectionTypeGranularity(sections);\n    const referenceValue = valueManager.getInitialReferenceValue({\n      referenceDate: referenceDateProp,\n      value: valueFromTheOutside,\n      utils,\n      props: internalProps,\n      granularity,\n      timezone\n    });\n    return _extends({}, stateWithoutReferenceDate, {\n      referenceValue\n    });\n  });\n  const [selectedSections, innerSetSelectedSections] = useControlled({\n    controlled: selectedSectionsProp,\n    default: null,\n    name: 'useField',\n    state: 'selectedSectionIndexes'\n  });\n  const setSelectedSections = newSelectedSections => {\n    innerSetSelectedSections(newSelectedSections);\n    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);\n    setState(prevState => _extends({}, prevState, {\n      selectedSectionQuery: null\n    }));\n  };\n  const selectedSectionIndexes = React.useMemo(() => {\n    if (selectedSections == null) {\n      return null;\n    }\n    if (selectedSections === 'all') {\n      return {\n        startIndex: 0,\n        endIndex: state.sections.length - 1,\n        shouldSelectBoundarySelectors: true\n      };\n    }\n    if (typeof selectedSections === 'number') {\n      return {\n        startIndex: selectedSections,\n        endIndex: selectedSections\n      };\n    }\n    if (typeof selectedSections === 'string') {\n      const selectedSectionIndex = state.sections.findIndex(section => section.type === selectedSections);\n      return {\n        startIndex: selectedSectionIndex,\n        endIndex: selectedSectionIndex\n      };\n    }\n    return selectedSections;\n  }, [selectedSections, state.sections]);\n  const publishValue = _ref => {\n    let {\n      value,\n      referenceValue,\n      sections\n    } = _ref;\n    setState(prevState => _extends({}, prevState, {\n      sections,\n      value,\n      referenceValue,\n      tempValueStrAndroid: null\n    }));\n    if (valueManager.areValuesEqual(utils, state.value, value)) {\n      return;\n    }\n    const context = {\n      validationError: validator({\n        adapter,\n        value,\n        props: _extends({}, internalProps, {\n          value,\n          timezone\n        })\n      })\n    };\n    handleValueChange(value, context);\n  };\n  const setSectionValue = (sectionIndex, newSectionValue) => {\n    const newSections = [...state.sections];\n    newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {\n      value: newSectionValue,\n      modified: true\n    });\n    return addPositionPropertiesToSections(newSections, isRTL);\n  };\n  const clearValue = () => {\n    publishValue({\n      value: valueManager.emptyValue,\n      referenceValue: state.referenceValue,\n      sections: getSectionsFromValue(valueManager.emptyValue)\n    });\n  };\n  const clearActiveSection = () => {\n    if (selectedSectionIndexes == null) {\n      return;\n    }\n    const activeSection = state.sections[selectedSectionIndexes.startIndex];\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter(section => section.value !== '').length;\n    const hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === '' ? 0 : 1);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, '');\n    const newActiveDate = hasNoOtherNonEmptySections ? null : utils.date(new Date(''));\n    const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n    if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {\n      publishValue(_extends({}, newValues, {\n        sections: newSections\n      }));\n    } else {\n      setState(prevState => _extends({}, prevState, newValues, {\n        sections: newSections,\n        tempValueStrAndroid: null\n      }));\n    }\n  };\n  const updateValueFromValueStr = valueStr => {\n    const parseDateStr = (dateStr, referenceDate) => {\n      const date = utils.parse(dateStr, format);\n      if (date == null || !utils.isValid(date)) {\n        return null;\n      }\n      const sections = splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);\n      return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);\n    };\n    const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);\n    const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);\n    publishValue({\n      value: newValue,\n      referenceValue: newReferenceValue,\n      sections: getSectionsFromValue(newValue, state.sections)\n    });\n  };\n  const updateSectionValue = _ref2 => {\n    let {\n      activeSection,\n      newSectionValue,\n      shouldGoToNextSection\n    } = _ref2;\n    /**\n     * 1. Decide which section should be focused\n     */\n    if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {\n      setSelectedSections(selectedSectionIndexes.startIndex + 1);\n    } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n      setSelectedSections(selectedSectionIndexes.startIndex);\n    }\n\n    /**\n     * 2. Try to build a valid date from the new section value\n     */\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);\n    const newActiveDateSections = activeDateManager.getSections(newSections);\n    const newActiveDate = getDateFromDateSections(utils, newActiveDateSections);\n    let values;\n    let shouldPublish;\n\n    /**\n     * If the new date is valid,\n     * Then we merge the value of the modified sections into the reference date.\n     * This makes sure that we don't lose some information of the initial date (like the time on a date field).\n     */\n    if (newActiveDate != null && utils.isValid(newActiveDate)) {\n      const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);\n      values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);\n      shouldPublish = true;\n    } else {\n      values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n      shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));\n    }\n\n    /**\n     * Publish or update the internal state with the new value and sections.\n     */\n    if (shouldPublish) {\n      return publishValue(_extends({}, values, {\n        sections: newSections\n      }));\n    }\n    return setState(prevState => _extends({}, prevState, values, {\n      sections: newSections,\n      tempValueStrAndroid: null\n    }));\n  };\n  const setTempAndroidValueStr = tempValueStrAndroid => setState(prev => _extends({}, prev, {\n    tempValueStrAndroid\n  }));\n  React.useEffect(() => {\n    const sections = getSectionsFromValue(state.value);\n    validateSections(sections, valueType);\n    setState(prevState => _extends({}, prevState, {\n      sections\n    }));\n  }, [format, utils.locale]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    let shouldUpdate = false;\n    if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {\n      shouldUpdate = true;\n    } else {\n      shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);\n    }\n    if (shouldUpdate) {\n      setState(prevState => _extends({}, prevState, {\n        value: valueFromTheOutside,\n        referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),\n        sections: getSectionsFromValue(valueFromTheOutside)\n      }));\n    }\n  }, [valueFromTheOutside]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    placeholder,\n    timezone\n  };\n};","map":{"version":3,"names":["_extends","React","useControlled","useTheme","useUtils","useLocaleText","useLocalizationContext","addPositionPropertiesToSections","splitFormatIntoSections","mergeDateIntoReferenceDate","getSectionsBoundaries","validateSections","getDateFromDateSections","useValueWithTimezone","getSectionTypeGranularity","useFieldState","params","utils","localeText","adapter","theme","isRTL","direction","valueManager","fieldValueManager","valueType","validator","internalProps","value","valueProp","defaultValue","referenceDate","referenceDateProp","onChange","format","formatDensity","selectedSections","selectedSectionsProp","onSelectedSectionsChange","shouldRespectLeadingZeros","timezone","timezoneProp","valueFromTheOutside","handleValueChange","sectionsValueBoundaries","useMemo","getSectionsFromValue","useCallback","fallbackSections","arguments","length","undefined","date","placeholder","getValueStrFromSections","emptyValue","state","setState","useState","sections","stateWithoutReferenceDate","referenceValue","tempValueStrAndroid","granularity","getInitialReferenceValue","props","innerSetSelectedSections","controlled","default","name","setSelectedSections","newSelectedSections","prevState","selectedSectionQuery","selectedSectionIndexes","startIndex","endIndex","shouldSelectBoundarySelectors","selectedSectionIndex","findIndex","section","type","publishValue","_ref","areValuesEqual","context","validationError","setSectionValue","sectionIndex","newSectionValue","newSections","modified","clearValue","clearActiveSection","activeSection","activeDateManager","getActiveDateManager","nonEmptySectionCountBefore","getSections","filter","hasNoOtherNonEmptySections","newActiveDate","Date","newValues","getNewValuesFromNewActiveDate","isValid","updateValueFromValueStr","valueStr","parseDateStr","dateStr","parse","newValue","parseValueStr","newReferenceValue","updateReferenceValue","updateSectionValue","_ref2","shouldGoToNextSection","newActiveDateSections","values","shouldPublish","mergedDate","setTempAndroidValueStr","prev","useEffect","locale","shouldUpdate","getTimezone"],"sources":["D:/IdeaProjects/valuemap/node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useControlled from '@mui/utils/useControlled';\nimport { useTheme } from '@mui/material/styles';\nimport { useUtils, useLocaleText, useLocalizationContext } from '../useUtils';\nimport { addPositionPropertiesToSections, splitFormatIntoSections, mergeDateIntoReferenceDate, getSectionsBoundaries, validateSections, getDateFromDateSections } from './useField.utils';\nimport { useValueWithTimezone } from '../useValueWithTimezone';\nimport { getSectionTypeGranularity } from '../../utils/getDefaultReferenceDate';\nexport const useFieldState = params => {\n  const utils = useUtils();\n  const localeText = useLocaleText();\n  const adapter = useLocalizationContext();\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const {\n    valueManager,\n    fieldValueManager,\n    valueType,\n    validator,\n    internalProps,\n    internalProps: {\n      value: valueProp,\n      defaultValue,\n      referenceDate: referenceDateProp,\n      onChange,\n      format,\n      formatDensity = 'dense',\n      selectedSections: selectedSectionsProp,\n      onSelectedSectionsChange,\n      shouldRespectLeadingZeros = false,\n      timezone: timezoneProp\n    }\n  } = params;\n  const {\n    timezone,\n    value: valueFromTheOutside,\n    handleValueChange\n  } = useValueWithTimezone({\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    onChange,\n    valueManager\n  });\n  const sectionsValueBoundaries = React.useMemo(() => getSectionsBoundaries(utils, timezone), [utils, timezone]);\n  const getSectionsFromValue = React.useCallback((value, fallbackSections = null) => fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, date => splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL)), [fieldValueManager, format, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);\n  const placeholder = React.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);\n  const [state, setState] = React.useState(() => {\n    const sections = getSectionsFromValue(valueFromTheOutside);\n    validateSections(sections, valueType);\n    const stateWithoutReferenceDate = {\n      sections,\n      value: valueFromTheOutside,\n      referenceValue: valueManager.emptyValue,\n      tempValueStrAndroid: null\n    };\n    const granularity = getSectionTypeGranularity(sections);\n    const referenceValue = valueManager.getInitialReferenceValue({\n      referenceDate: referenceDateProp,\n      value: valueFromTheOutside,\n      utils,\n      props: internalProps,\n      granularity,\n      timezone\n    });\n    return _extends({}, stateWithoutReferenceDate, {\n      referenceValue\n    });\n  });\n  const [selectedSections, innerSetSelectedSections] = useControlled({\n    controlled: selectedSectionsProp,\n    default: null,\n    name: 'useField',\n    state: 'selectedSectionIndexes'\n  });\n  const setSelectedSections = newSelectedSections => {\n    innerSetSelectedSections(newSelectedSections);\n    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);\n    setState(prevState => _extends({}, prevState, {\n      selectedSectionQuery: null\n    }));\n  };\n  const selectedSectionIndexes = React.useMemo(() => {\n    if (selectedSections == null) {\n      return null;\n    }\n    if (selectedSections === 'all') {\n      return {\n        startIndex: 0,\n        endIndex: state.sections.length - 1,\n        shouldSelectBoundarySelectors: true\n      };\n    }\n    if (typeof selectedSections === 'number') {\n      return {\n        startIndex: selectedSections,\n        endIndex: selectedSections\n      };\n    }\n    if (typeof selectedSections === 'string') {\n      const selectedSectionIndex = state.sections.findIndex(section => section.type === selectedSections);\n      return {\n        startIndex: selectedSectionIndex,\n        endIndex: selectedSectionIndex\n      };\n    }\n    return selectedSections;\n  }, [selectedSections, state.sections]);\n  const publishValue = ({\n    value,\n    referenceValue,\n    sections\n  }) => {\n    setState(prevState => _extends({}, prevState, {\n      sections,\n      value,\n      referenceValue,\n      tempValueStrAndroid: null\n    }));\n    if (valueManager.areValuesEqual(utils, state.value, value)) {\n      return;\n    }\n    const context = {\n      validationError: validator({\n        adapter,\n        value,\n        props: _extends({}, internalProps, {\n          value,\n          timezone\n        })\n      })\n    };\n    handleValueChange(value, context);\n  };\n  const setSectionValue = (sectionIndex, newSectionValue) => {\n    const newSections = [...state.sections];\n    newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {\n      value: newSectionValue,\n      modified: true\n    });\n    return addPositionPropertiesToSections(newSections, isRTL);\n  };\n  const clearValue = () => {\n    publishValue({\n      value: valueManager.emptyValue,\n      referenceValue: state.referenceValue,\n      sections: getSectionsFromValue(valueManager.emptyValue)\n    });\n  };\n  const clearActiveSection = () => {\n    if (selectedSectionIndexes == null) {\n      return;\n    }\n    const activeSection = state.sections[selectedSectionIndexes.startIndex];\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter(section => section.value !== '').length;\n    const hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === '' ? 0 : 1);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, '');\n    const newActiveDate = hasNoOtherNonEmptySections ? null : utils.date(new Date(''));\n    const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n    if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {\n      publishValue(_extends({}, newValues, {\n        sections: newSections\n      }));\n    } else {\n      setState(prevState => _extends({}, prevState, newValues, {\n        sections: newSections,\n        tempValueStrAndroid: null\n      }));\n    }\n  };\n  const updateValueFromValueStr = valueStr => {\n    const parseDateStr = (dateStr, referenceDate) => {\n      const date = utils.parse(dateStr, format);\n      if (date == null || !utils.isValid(date)) {\n        return null;\n      }\n      const sections = splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);\n      return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);\n    };\n    const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);\n    const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);\n    publishValue({\n      value: newValue,\n      referenceValue: newReferenceValue,\n      sections: getSectionsFromValue(newValue, state.sections)\n    });\n  };\n  const updateSectionValue = ({\n    activeSection,\n    newSectionValue,\n    shouldGoToNextSection\n  }) => {\n    /**\n     * 1. Decide which section should be focused\n     */\n    if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {\n      setSelectedSections(selectedSectionIndexes.startIndex + 1);\n    } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n      setSelectedSections(selectedSectionIndexes.startIndex);\n    }\n\n    /**\n     * 2. Try to build a valid date from the new section value\n     */\n    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n    const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);\n    const newActiveDateSections = activeDateManager.getSections(newSections);\n    const newActiveDate = getDateFromDateSections(utils, newActiveDateSections);\n    let values;\n    let shouldPublish;\n\n    /**\n     * If the new date is valid,\n     * Then we merge the value of the modified sections into the reference date.\n     * This makes sure that we don't lose some information of the initial date (like the time on a date field).\n     */\n    if (newActiveDate != null && utils.isValid(newActiveDate)) {\n      const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);\n      values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);\n      shouldPublish = true;\n    } else {\n      values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);\n      shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));\n    }\n\n    /**\n     * Publish or update the internal state with the new value and sections.\n     */\n    if (shouldPublish) {\n      return publishValue(_extends({}, values, {\n        sections: newSections\n      }));\n    }\n    return setState(prevState => _extends({}, prevState, values, {\n      sections: newSections,\n      tempValueStrAndroid: null\n    }));\n  };\n  const setTempAndroidValueStr = tempValueStrAndroid => setState(prev => _extends({}, prev, {\n    tempValueStrAndroid\n  }));\n  React.useEffect(() => {\n    const sections = getSectionsFromValue(state.value);\n    validateSections(sections, valueType);\n    setState(prevState => _extends({}, prevState, {\n      sections\n    }));\n  }, [format, utils.locale]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    let shouldUpdate = false;\n    if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {\n      shouldUpdate = true;\n    } else {\n      shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);\n    }\n    if (shouldUpdate) {\n      setState(prevState => _extends({}, prevState, {\n        value: valueFromTheOutside,\n        referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),\n        sections: getSectionsFromValue(valueFromTheOutside)\n      }));\n    }\n  }, [valueFromTheOutside]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    placeholder,\n    timezone\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}